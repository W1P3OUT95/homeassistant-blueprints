blueprint:
  name: Global Last Brightness and Color Restore (UI-ready)
  description: >
    Remembers the last brightness and color for every light and restores them
    when a light is turned on without explicit values. Works for all current
    and future lights. Splits JSON storage across three text helpers to avoid
    UI character limits. Uses 200 as default brightness if nothing is saved yet.
  domain: automation
  input:
    storage_helper_1:
      name: Storage helper 1
      description: First input_text helper (max 255 chars)
      selector:
        entity:
          domain: input_text
    storage_helper_2:
      name: Storage helper 2
      description: Second input_text helper (max 255 chars)
      selector:
        entity:
          domain: input_text
    storage_helper_3:
      name: Storage helper 3
      description: Third input_text helper (max 255 chars)
      selector:
        entity:
          domain: input_text

mode: restart
max_exceeded: silent

variables:
  storage_helpers: 
    - !input storage_helper_1
    - !input storage_helper_2
    - !input storage_helper_3
  default_brightness: 200

trigger:
  - platform: state
    entity_id: "*"
    for: "00:00:00"   # triggers immediately

condition: []

action:
  - variables:
      eid: "{{ trigger.entity_id }}"
      state_attrs: "{{ trigger.to_state.attributes }}"
      supported_modes: "{{ state_attrs.supported_color_modes | default([]) }}"
      # Combine the three helpers into one JSON map
      raw_data: >
        {% set all_texts = storage_helpers | map('states') | list %}
        {% set combined = all_texts | join('') %}
        {{ combined | default('{}') }}
      map_data: >
        {% set s = raw_data if raw_data not in ['unknown','unavailable'] else '{}' %}
        {{ s | from_json }}

  # Save current light state if itâ€™s a light
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id.startswith('light.') }}"
        sequence:
          - variables:
              new_record: >
                {{
                  {
                    "b": state_attrs.brightness | int(0),
                    "m": state_attrs.color_mode | default(None),
                    "hs": state_attrs.hs_color | default(None),
                    "rgb": state_attrs.rgb_color | default(None),
                    "xy": state_attrs.xy_color | default(None),
                    "ctk": state_attrs.color_temp_kelvin | default(state_attrs.color_temp | default(None))
                  }
                }}
              updated_map: >
                {% set d = dict(map_data) %}
                {% set _ = d.update({eid: new_record}) %}
                {{ d | tojson }}
              # split across 3 helpers
              part_len = (updated_map | length // 3) + 1
              part1 = updated_map[:part_len]
              part2 = updated_map[part_len:part_len*2]
              part3 = updated_map[part_len*2:]
          - service: input_text.set_value
            target:
              entity_id: "{{ storage_helpers[0] }}"
            data:
              value: "{{ part1 }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ storage_helpers[1] }}"
            data:
              value: "{{ part2 }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ storage_helpers[2] }}"
            data:
              value: "{{ part3 }}"

  # Restore brightness/color when light is turned on without values
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id.startswith('light.') }}"
          - condition: template
            value_template: "{{ state_attrs.brightness in [None,0] }}"
        sequence:
          - variables:
              record: "{{ map_data.get(eid, {}) }}"
              b: "{{ record.get('b', default_brightness) | int }}"
              mode: "{{ record.get('m') }}"
              hs: "{{ record.get('hs') }}"
              rgb: "{{ record.get('rgb') }}"
              xy: "{{ record.get('xy') }}"
              ctk: "{{ record.get('ctk') }}"
              no_color_now: >
                {{ not (
                    state_attrs.hs_color or
                    state_attrs.rgb_color or
                    state_attrs.xy_color or
                    state_attrs.color_temp or
                    state_attrs.color_temp_kelvin
                ) }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ no_color_now and mode == 'hs' and ('hs' in supported_modes) and hs is not none }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ eid }}"
                    data:
                      brightness: "{{ b }}"
                      hs_color: "{{ hs }}"
                      transition: 0.3
              - conditions:
                  - condition: template
                    value_template: "{{ no_color_now and mode == 'rgb' and ('rgb' in supported_modes) and rgb is not none }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ eid }}"
                    data:
                      brightness: "{{ b }}"
                      rgb_color: "{{ rgb }}"
                      transition: 0.3
              - conditions:
                  - condition: template
                    value_template: "{{ no_color_now and mode in ['xy','xy_color'] and ('xy' in supported_modes) and xy is not none }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ eid }}"
                    data:
                      brightness: "{{ b }}"
                      xy_color: "{{ xy }}"
                      transition: 0.3
              - conditions:
                  - condition: template
                    value_template: "{{ no_color_now and mode in ['color_temp','color_temp_kelvin'] and ('color_temp' in supported_modes or 'color_temp_kelvin' in supported_modes) and ctk is not none }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ eid }}"
                    data:
                      brightness: "{{ b }}"
                      color_temp_kelvin: "{{ ctk }}"
                      transition: 0.3
            default:
              - service: light.turn_on
                target:
                  entity_id: "{{ eid }}"
                data:
                  brightness: "{{ b }}"
                  transition: 0.3
