blueprint:
  name: Global Last Brightness and Color Restore (Single Helper, Fixed)
  description: >
    Remembers the last brightness and color for selected lights and restores them
    when a light is turned on without explicit values. Uses one input_text helper.
    Default brightness is 200 if nothing is saved yet.
  domain: automation
  input:
    storage_helper:
      name: Storage helper
      description: Input_text helper to store light states (JSON)
      selector:
        entity:
          domain: input_text
    lights_to_track:
      name: Lights to Track
      description: Select which lights this automation should monitor
      selector:
        entity:
          domain: light
          multiple: true

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input lights_to_track

condition: []

action:
  - variables:
      eid: "{{ trigger.entity_id }}"
      state_obj: "{{ states[eid] }}"
  # Only proceed if itâ€™s a light with attributes
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ state_obj is not none and state_obj.attributes is defined }}"
        sequence:
          - variables:
              state_attrs: "{{ state_obj.attributes }}"
              supported_modes: "{{ state_attrs.supported_color_modes | default([]) }}"
              raw_data: "{{ states(!input storage_helper) | default('{}') }}"
              map_data: >
                {% set s = raw_data if raw_data not in ['unknown','unavailable'] else '{}' %}
                {{ s | from_json }}

          # Save current light state
          - variables:
              new_record: >
                {{
                  {
                    "b": state_attrs.brightness | int(0),
                    "m": state_attrs.color_mode | default(None),
                    "hs": state_attrs.hs_color | default(None),
                    "rgb": state_attrs.rgb_color | default(None),
                    "xy": state_attrs.xy_color | default(None),
                    "ctk": state_attrs.color_temp_kelvin | default(state_attrs.color_temp | default(None))
                  }
                }}
              updated_map: >
                {% set d = dict(map_data) %}
                {% set _ = d.update({eid: new_record}) %}
                {{ d | tojson }}
          - service: input_text.set_value
            target:
              entity_id: !input storage_helper
            data:
              value: "{{ updated_map }}"

          # Restore brightness/color if light turned on without values
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ state_obj.state == 'on' and (state_attrs.brightness in [None,0]) }}"
                sequence:
                  - variables:
                      record: "{{ map_data.get(eid, {}) }}"
                      b: "{{ record.get('b', 200) | int }}"
                      mode: "{{ record.get('m') }}"
                      hs: "{{ record.get('hs') }}"
                      rgb: "{{ record.get('rgb') }}"
                      xy: "{{ record.get('xy') }}"
                      ctk: "{{ record.get('ctk') }}"
                      no_color_now: >
                        {{ not (
                            state_attrs.hs_color or
                            state_attrs.rgb_color or
                            state_attrs.xy_color or
                            state_attrs.color_temp or
                            state_attrs.color_temp_kelvin
                        ) }}
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ no_color_now and mode == 'hs' and ('hs' in supported_modes) and hs is not none }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ eid }}"
                            data:
                              brightness: "{{ b }}"
                              hs_color: "{{ hs }}"
                              transition: 0.3
                      - conditions:
                          - condition: template
                            value_template: "{{ no_color_now and mode == 'rgb' and ('rgb' in supported_modes) and rgb is not none }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ eid }}"
                            data:
                              brightness: "{{ b }}"
                              rgb_color: "{{ rgb }}"
                              transition: 0.3
                      - conditions:
                          - condition: template
                            value_template: "{{ no_color_now and mode in ['xy','xy_color'] and ('xy' in supported_modes) and xy is not none }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ eid }}"
                            data:
                              brightness: "{{ b }}"
                              xy_color: "{{ xy }}"
                              transition: 0.3
                      - conditions:
                          - condition: template
                            value_template: "{{ no_color_now and mode in ['color_temp','color_temp_kelvin'] and ('color_temp' in supported_modes or 'color_temp_kelvin' in supported_modes) and ctk is not none }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ eid }}"
                            data:
                              brightness: "{{ b }}"
                              color_temp_kelvin: "{{ ctk }}"
                              transition: 0.3
                  default:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ eid }}"
                      data:
                        brightness: "{{ b }}"
                        transition: 0.3
